#!/bin/bash

set -e

if [ -z "$1" ]; then
	printf 'ERROR: no gluon-release was specified.\n' >&2
		exit 1
fi


if ! [ -f "./gluon" ]; then
	printf 'ERROR: "./gluon"-file could not be found in wd, please cwd to the right directory.\n' >&2
	exit 1
fi

. ./gluon

sel_gluon_release="$1"
selected_found=0

opwd=$(pwd)

for GluonRelease in $GLUON_RELEASES; do
	if ! [ "$GluonRelease" == "$sel_gluon_release" ]; then
		continue
	else
		selected_found=1
		break
	fi
done

if [ "$selected_found" -ne "1" ]; then
	printf 'ERROR: "$sel_gluon_release" could not be found in ./gluon file.\n' >&2
	exit 1
fi


if ! [ -d "$GluonRelease-repo-patches" ]; then
	printf 'WARN: No repo-patches found.\n' >&2
	exit 0
fi

cd "$GluonRelease"

TMPDIR="./gfb_tmp"
mkdir -p "$TMPDIR"
PATCHDIR="$TMPDIR"/patching
trap 'rm -rf "$PATCHDIR"' EXIT

repopatches_dir="$opwd/$GluonRelease-repo-patches"

git clone -s -b base --single-branch . "$PATCHDIR" 2>/dev/null
cd "$PATCHDIR"

for dir in $(find "$repopatches_dir/" -type d | sort || printf 'WARN: No patchsets found.\n' >&2 && exit 0); do
	if [ "$repopatches_dir/" == "$dir" ]; then
		continue
	fi
	for patch in $(find "$dir" -type f | sort || printf "WARN: Error reading patchset $(echo $dir | rev | cut -d / -f 1 | rev) found.\n" >&2 ); do
		git -c user.name='GluonFirmwareBuilder Patch Manager' -c user.email='gfb@void.example.com' -c commit.gpgsign=false am --whitespace=nowarn --committer-date-is-author-date "$patch"
	done
done

cd ".."

git fetch "$PATCHDIR" 2>/dev/null
git checkout -B patched FETCH_HEAD
git submodule update --init --recursive
rm -rf "$PATCHDIR"
